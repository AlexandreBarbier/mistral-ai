/*
 * Mistral AI API
 *
 * Our Chat Completion and Embeddings APIs specification. Create your account on [La Plateforme](https://console.mistral.ai) to get access and read the [docs](https://docs.mistral.ai) to learn how to use it.
 *
 * The version of the OpenAPI document: 0.0.2
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct EventOut {
    /// The name of the event.
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "data", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub data: Option<Option<std::collections::HashMap<String, serde_json::Value>>>,
    /// The UNIX timestamp (in seconds) of the event.
    #[serde(rename = "created_at")]
    pub created_at: i32,
}

impl EventOut {
    pub fn new(name: String, created_at: i32) -> EventOut {
        EventOut {
            name,
            data: None,
            created_at,
        }
    }
}

