/*
 * Mistral AI API
 *
 * Our Chat Completion and Embeddings APIs specification. Create your account on [La Plateforme](https://console.mistral.ai) to get access and read the [docs](https://docs.mistral.ai) to learn how to use it.
 *
 * The version of the OpenAPI document: 0.0.2
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct FtModelOut {
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "object", skip_serializing_if = "Option::is_none")]
    pub object: Option<Object>,
    #[serde(rename = "created")]
    pub created: i32,
    #[serde(rename = "owned_by")]
    pub owned_by: String,
    #[serde(rename = "root")]
    pub root: String,
    #[serde(rename = "archived")]
    pub archived: bool,
    #[serde(rename = "name", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub name: Option<Option<String>>,
    #[serde(rename = "description", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub description: Option<Option<String>>,
    #[serde(rename = "capabilities")]
    pub capabilities: Box<models::FtModelCapabilitiesOut>,
    #[serde(rename = "max_context_length", skip_serializing_if = "Option::is_none")]
    pub max_context_length: Option<i32>,
    #[serde(rename = "aliases", skip_serializing_if = "Option::is_none")]
    pub aliases: Option<Vec<String>>,
    #[serde(rename = "job")]
    pub job: uuid::Uuid,
}

impl FtModelOut {
    pub fn new(id: String, created: i32, owned_by: String, root: String, archived: bool, capabilities: models::FtModelCapabilitiesOut, job: uuid::Uuid) -> FtModelOut {
        FtModelOut {
            id,
            object: None,
            created,
            owned_by,
            root,
            archived,
            name: None,
            description: None,
            capabilities: Box::new(capabilities),
            max_context_length: None,
            aliases: None,
            job,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Object {
    #[serde(rename = "model")]
    Model,
}

impl Default for Object {
    fn default() -> Object {
        Self::Model
    }
}

