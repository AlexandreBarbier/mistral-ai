/*
 * Mistral AI API
 *
 * Our Chat Completion and Embeddings APIs specification. Create your account on [La Plateforme](https://console.mistral.ai) to get access and read the [docs](https://docs.mistral.ai) to learn how to use it.
 *
 * The version of the OpenAPI document: 0.0.2
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct WandbIntegration {
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<Type>,
    /// The name of the project that the new run will be created under.
    #[serde(rename = "project")]
    pub project: String,
    #[serde(rename = "name", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub name: Option<Option<String>>,
    /// The WandB API key to use for authentication.
    #[serde(rename = "api_key")]
    pub api_key: String,
    #[serde(rename = "run_name", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub run_name: Option<Option<String>>,
}

impl WandbIntegration {
    pub fn new(project: String, api_key: String) -> WandbIntegration {
        WandbIntegration {
            r#type: None,
            project,
            name: None,
            api_key,
            run_name: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "wandb")]
    Wandb,
}

impl Default for Type {
    fn default() -> Type {
        Self::Wandb
    }
}

