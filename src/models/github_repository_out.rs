/*
 * Mistral AI API
 *
 * Our Chat Completion and Embeddings APIs specification. Create your account on [La Plateforme](https://console.mistral.ai) to get access and read the [docs](https://docs.mistral.ai) to learn how to use it.
 *
 * The version of the OpenAPI document: 0.0.2
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GithubRepositoryOut {
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<Type>,
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "owner")]
    pub owner: String,
    #[serde(rename = "ref", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub r#ref: Option<Option<String>>,
    #[serde(rename = "weight", skip_serializing_if = "Option::is_none")]
    pub weight: Option<f64>,
    #[serde(rename = "commit_id")]
    pub commit_id: String,
}

impl GithubRepositoryOut {
    pub fn new(name: String, owner: String, commit_id: String) -> GithubRepositoryOut {
        GithubRepositoryOut {
            r#type: None,
            name,
            owner,
            r#ref: None,
            weight: None,
            commit_id,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "github")]
    Github,
}

impl Default for Type {
    fn default() -> Type {
        Self::Github
    }
}

