/*
 * Mistral AI API
 *
 * Our Chat Completion and Embeddings APIs specification. Create your account on [La Plateforme](https://console.mistral.ai) to get access and read the [docs](https://docs.mistral.ai) to learn how to use it.
 *
 * The version of the OpenAPI document: 0.0.2
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SampleType {
    #[serde(rename = "pretrain")]
    Pretrain,
    #[serde(rename = "instruct")]
    Instruct,
    #[serde(rename = "batch_request")]
    BatchRequest,
    #[serde(rename = "batch_result")]
    BatchResult,
    #[serde(rename = "batch_error")]
    BatchError,

}

impl std::fmt::Display for SampleType {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Pretrain => write!(f, "pretrain"),
            Self::Instruct => write!(f, "instruct"),
            Self::BatchRequest => write!(f, "batch_request"),
            Self::BatchResult => write!(f, "batch_result"),
            Self::BatchError => write!(f, "batch_error"),
        }
    }
}

impl Default for SampleType {
    fn default() -> SampleType {
        Self::Pretrain
    }
}

