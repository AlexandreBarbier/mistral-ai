/*
 * Mistral AI API
 *
 * Our Chat Completion and Embeddings APIs specification. Create your account on [La Plateforme](https://console.mistral.ai) to get access and read the [docs](https://docs.mistral.ai) to learn how to use it.
 *
 * The version of the OpenAPI document: 0.0.2
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct FtModelCapabilitiesOut {
    #[serde(rename = "completion_chat", skip_serializing_if = "Option::is_none")]
    pub completion_chat: Option<bool>,
    #[serde(rename = "completion_fim", skip_serializing_if = "Option::is_none")]
    pub completion_fim: Option<bool>,
    #[serde(rename = "function_calling", skip_serializing_if = "Option::is_none")]
    pub function_calling: Option<bool>,
    #[serde(rename = "fine_tuning", skip_serializing_if = "Option::is_none")]
    pub fine_tuning: Option<bool>,
}

impl FtModelCapabilitiesOut {
    pub fn new() -> FtModelCapabilitiesOut {
        FtModelCapabilitiesOut {
            completion_chat: None,
            completion_fim: None,
            function_calling: None,
            fine_tuning: None,
        }
    }
}

