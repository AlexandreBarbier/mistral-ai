/*
 * Mistral AI API
 *
 * Our Chat Completion and Embeddings APIs specification. Create your account on [La Plateforme](https://console.mistral.ai) to get access and read the [docs](https://docs.mistral.ai) to learn how to use it.
 *
 * The version of the OpenAPI document: 0.0.2
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// MetricOut : Metrics at the step number during the fine-tuning job. Use these metrics to assess if the training is going smoothly (loss should decrease, token accuracy should increase).
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct MetricOut {
    #[serde(rename = "train_loss", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub train_loss: Option<Option<f64>>,
    #[serde(rename = "valid_loss", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub valid_loss: Option<Option<f64>>,
    #[serde(rename = "valid_mean_token_accuracy", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub valid_mean_token_accuracy: Option<Option<f64>>,
}

impl MetricOut {
    /// Metrics at the step number during the fine-tuning job. Use these metrics to assess if the training is going smoothly (loss should decrease, token accuracy should increase).
    pub fn new() -> MetricOut {
        MetricOut {
            train_loss: None,
            valid_loss: None,
            valid_mean_token_accuracy: None,
        }
    }
}

