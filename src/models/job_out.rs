/*
 * Mistral AI API
 *
 * Our Chat Completion and Embeddings APIs specification. Create your account on [La Plateforme](https://console.mistral.ai) to get access and read the [docs](https://docs.mistral.ai) to learn how to use it.
 *
 * The version of the OpenAPI document: 0.0.2
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct JobOut {
    /// The ID of the job.
    #[serde(rename = "id")]
    pub id: uuid::Uuid,
    #[serde(rename = "auto_start")]
    pub auto_start: bool,
    #[serde(rename = "hyperparameters")]
    pub hyperparameters: Box<models::TrainingParameters>,
    #[serde(rename = "model")]
    pub model: models::FineTuneableModel,
    /// The current status of the fine-tuning job.
    #[serde(rename = "status")]
    pub status: Status,
    /// The type of job (`FT` for fine-tuning).
    #[serde(rename = "job_type")]
    pub job_type: String,
    /// The UNIX timestamp (in seconds) for when the fine-tuning job was created.
    #[serde(rename = "created_at")]
    pub created_at: i32,
    /// The UNIX timestamp (in seconds) for when the fine-tuning job was last modified.
    #[serde(rename = "modified_at")]
    pub modified_at: i32,
    /// A list containing the IDs of uploaded files that contain training data.
    #[serde(rename = "training_files")]
    pub training_files: Vec<uuid::Uuid>,
    #[serde(rename = "validation_files", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub validation_files: Option<Option<Vec<uuid::Uuid>>>,
    /// The object type of the fine-tuning job.
    #[serde(rename = "object", skip_serializing_if = "Option::is_none")]
    pub object: Option<Object>,
    #[serde(rename = "fine_tuned_model", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub fine_tuned_model: Option<Option<String>>,
    #[serde(rename = "suffix", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub suffix: Option<Option<String>>,
    #[serde(rename = "integrations", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub integrations: Option<Option<Vec<models::JobOutIntegrationsInner>>>,
    #[serde(rename = "trained_tokens", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub trained_tokens: Option<Option<i32>>,
    #[serde(rename = "repositories", skip_serializing_if = "Option::is_none")]
    pub repositories: Option<Vec<models::JobOutRepositoriesInner>>,
    #[serde(rename = "metadata", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub metadata: Option<Option<Box<models::JobMetadataOut>>>,
}

impl JobOut {
    pub fn new(id: uuid::Uuid, auto_start: bool, hyperparameters: models::TrainingParameters, model: models::FineTuneableModel, status: Status, job_type: String, created_at: i32, modified_at: i32, training_files: Vec<uuid::Uuid>) -> JobOut {
        JobOut {
            id,
            auto_start,
            hyperparameters: Box::new(hyperparameters),
            model,
            status,
            job_type,
            created_at,
            modified_at,
            training_files,
            validation_files: None,
            object: None,
            fine_tuned_model: None,
            suffix: None,
            integrations: None,
            trained_tokens: None,
            repositories: None,
            metadata: None,
        }
    }
}
/// The current status of the fine-tuning job.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "QUEUED")]
    Queued,
    #[serde(rename = "STARTED")]
    Started,
    #[serde(rename = "VALIDATING")]
    Validating,
    #[serde(rename = "VALIDATED")]
    Validated,
    #[serde(rename = "RUNNING")]
    Running,
    #[serde(rename = "FAILED_VALIDATION")]
    FailedValidation,
    #[serde(rename = "FAILED")]
    Failed,
    #[serde(rename = "SUCCESS")]
    Success,
    #[serde(rename = "CANCELLED")]
    Cancelled,
    #[serde(rename = "CANCELLATION_REQUESTED")]
    CancellationRequested,
}

impl Default for Status {
    fn default() -> Status {
        Self::Queued
    }
}
/// The object type of the fine-tuning job.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Object {
    #[serde(rename = "job")]
    Job,
}

impl Default for Object {
    fn default() -> Object {
        Self::Job
    }
}

