/*
 * Mistral AI API
 *
 * Our Chat Completion and Embeddings APIs specification. Create your account on [La Plateforme](https://console.mistral.ai) to get access and read the [docs](https://docs.mistral.ai) to learn how to use it.
 *
 * The version of the OpenAPI document: 0.0.2
 *
 * Generated by: https://openapi-generator.tech
 */

use super::{configuration, Error};
use crate::{apis::ResponseContent, models};
use reqwest;
use serde::{Deserialize, Serialize};

/// struct for typed errors of method [`jobs_api_routes_batch_cancel_batch_job`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum JobsApiRoutesBatchCancelBatchJobError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`jobs_api_routes_batch_create_batch_job`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum JobsApiRoutesBatchCreateBatchJobError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`jobs_api_routes_batch_get_batch_job`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum JobsApiRoutesBatchGetBatchJobError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`jobs_api_routes_batch_get_batch_jobs`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum JobsApiRoutesBatchGetBatchJobsError {
    UnknownValue(serde_json::Value),
}

/// Request the cancellation of a batch job.
pub async fn jobs_api_routes_batch_cancel_batch_job(
    configuration: &configuration::Configuration,
    job_id: &str,
) -> Result<models::BatchJobOut, Error<JobsApiRoutesBatchCancelBatchJobError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_job_id = job_id;

    let uri_str = format!(
        "{}/v1/batch/jobs/{job_id}/cancel",
        configuration.base_path,
        job_id = crate::apis::urlencode(p_job_id)
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let content = resp.text().await?;
        let entity: Option<JobsApiRoutesBatchCancelBatchJobError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Create a new batch job, it will be queued for processing.
pub async fn jobs_api_routes_batch_create_batch_job(
    configuration: &configuration::Configuration,
    batch_job_in: models::BatchJobIn,
) -> Result<models::BatchJobOut, Error<JobsApiRoutesBatchCreateBatchJobError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_batch_job_in = batch_job_in;

    let uri_str = format!("{}/v1/batch/jobs", configuration.base_path);
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_batch_job_in);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let content = resp.text().await?;
        let entity: Option<JobsApiRoutesBatchCreateBatchJobError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Get a batch job details by its UUID.
pub async fn jobs_api_routes_batch_get_batch_job(
    configuration: &configuration::Configuration,
    job_id: &str,
) -> Result<models::BatchJobOut, Error<JobsApiRoutesBatchGetBatchJobError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_job_id = job_id;

    let uri_str = format!(
        "{}/v1/batch/jobs/{job_id}",
        configuration.base_path,
        job_id = crate::apis::urlencode(p_job_id)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let content = resp.text().await?;
        let entity: Option<JobsApiRoutesBatchGetBatchJobError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Get a list of batch jobs for your organization and user.
pub async fn jobs_api_routes_batch_get_batch_jobs(
    configuration: &configuration::Configuration,
    page: Option<i32>,
    page_size: Option<i32>,
    model: Option<&str>,
    metadata: Option<std::collections::HashMap<String, serde_json::Value>>,
    created_after: Option<String>,
    created_by_me: Option<bool>,
    status: Option<models::BatchJobStatus>,
) -> Result<models::BatchJobsOut, Error<JobsApiRoutesBatchGetBatchJobsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_page = page;
    let p_page_size = page_size;
    let p_model = model;
    let p_metadata = metadata;
    let p_created_after = created_after;
    let p_created_by_me = created_by_me;
    let p_status = status;

    let uri_str = format!("{}/v1/batch/jobs", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_page {
        req_builder = req_builder.query(&[("page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_page_size {
        req_builder = req_builder.query(&[("page_size", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_model {
        req_builder = req_builder.query(&[("model", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_metadata {
        req_builder =
            req_builder.query(&[("metadata", &serde_json::to_string(param_value).unwrap())]);
    }
    if let Some(ref param_value) = p_created_after {
        req_builder = req_builder.query(&[("created_after", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_created_by_me {
        req_builder = req_builder.query(&[("created_by_me", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_status {
        req_builder = req_builder.query(&[("status", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let content = resp.text().await?;
        let entity: Option<JobsApiRoutesBatchGetBatchJobsError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}
